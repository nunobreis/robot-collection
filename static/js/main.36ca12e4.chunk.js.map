{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","redux/actions.js","redux/constants.js","redux/reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","id","email","className","src","alt","CardList","robots","map","robot","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","children","ErrorBoundry","props","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","React","connect","searchRobots","requestRobots","isPendig","dispatch","e","text","target","value","fetch","then","res","json","data","payload","catch","robotsActions","initialState","initialStateRobots","rootReducer","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36ca12e4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\n\nconst Card = ({ name, id, email, ...props }) => (\n  <div className=\"bg-light-green dib br3 pa3 ma2 grow\">\n    <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\n    <div>\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  </div>\n)\n\nexport default Card\n","import React from 'react'\n\nimport Card from './Card'\n\nconst CardList = ({ robots, ...props }) => <div>\n  {robots.map((robot, i) => (\n    <Card\n     key={i}\n     id={robot.id}\n     name={robot.name}\n     email={robot.email}\n    />\n  ))}\n</div>\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({ searchfield, searchChange }) => <div className=\"pa2\">\n  <input\n    className=\"pa3 ba b--green bg-lightest-blue\"\n    type=\"text\"\n    placeholder=\"search for a robot\"\n    onChange={searchChange}\n  />\n</div>\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = ({ children }) => (\n  <div>\n    {children}\n  </div>\n)\n\nexport default Scroll\n","import React, { Component } from 'react'\n\nexport default class ErrorBoundry extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      hasError: true\n    })\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1>Oops, something went wrong!</h1>\n    }\n\n    return this.props.children\n  }\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport './App.css'\nimport * as robotsActions from '../redux/actions'\n\nimport CardList from '../Components/CardList'\nimport SearchBox from '../Components/SearchBox'\nimport Scroll from '../Components/Scroll'\nimport ErrorBoundry from '../Components/ErrorBoundry'\n\nclass App extends React.Component {\n  componentDidMount() {\n   this.props.onRequestRobots()\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props\n    const filteredRobots = robots.filter(robots =>\n      robots.name.toLowerCase().includes(searchField.toLowerCase()),\n    )\n    if (isPending) {\n      return <h1 className=\"tc\">Loading...</h1>\n    }\n\n    return (\n      <div className=\"tc\">\n        <h1>Robot Friends</h1>\n        <SearchBox\n          searchChange={onSearchChange}\n          searchField={searchField}\n        />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ searchRobots, requestRobots }) => ({\n  searchField: searchRobots.searchField,\n  robots: requestRobots.robots,\n  isPendig: requestRobots.isPendig,\n  error: requestRobots.error\n})\n\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: e => dispatch(\n    robotsActions.setSearchField(e.target.value)\n  ),\n  onRequestRobots: () => robotsActions.requestRobots(dispatch)\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants'\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  text,\n})\n\nexport const requestRobots = dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING,\n  })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(data => dispatch({\n      type: REQUEST_ROBOTS_SUCCESS,\n      payload: data\n    }))\n    .catch(error => dispatch({\n      type: REQUEST_ROBOTS_FAILED,\n      payload: error\n    }))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants'\n\nconst initialState = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return {\n        ...state,\n        searchField: action.text\n      }\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return {\n        ...state,\n        isPending: true\n      }\n    case REQUEST_ROBOTS_SUCCESS:\n      return {\n        ...state,\n        robots: action.payload,\n        isPending: false\n      }\n\n    case REQUEST_ROBOTS_FAILED:\n      return {\n        ...state,\n        error: action.payload,\n        isPending: false\n      }\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  createStore,\n  applyMiddleware,\n  combineReducers\n} from 'redux'\nimport { createLogger } from 'redux-logger'\nimport { Provider } from 'react-redux'\nimport thunkMiddleware from 'redux-logger'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport 'tachyons'\nimport App from './Containers/App'\n\nimport { searchRobots, requestRobots } from './redux/reducers'\n\nconst rootReducer = combineReducers({\n  searchRobots,\n  requestRobots\n})\n\nconst logger = createLogger()\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}